{"version":3,"file":"static/js/740.990ac75d.chunk.js","mappings":"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","sources":["components/main-body/home/Products/product-list/ProductList.jsx"],"sourcesContent":["import { faHeart, faShoppingCart, faStar, faStarHalf } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Alert, Snackbar } from '@mui/material'\r\nimport { padding } from '@mui/system';\r\nimport React, { useRef, useState } from 'react'\r\nimport ReactPaginate from 'react-paginate';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { addToUserCartApi, loadAddToCart, loadAddToWishlist } from '../../../../../redux/products/productsAction';\r\n\r\nfunction ProductList() {\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n    const [PER_PAGE, setPerPage] = useState(3);\r\n    const [open, setOpen] = useState(false);\r\n    const [productName, setProductName] = useState('');\r\n    const perPageArr = [5, 10, 20, 50]\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const isAddedToWishList = useRef(false);\r\n    const productList = useSelector(state => state.fetchedProductsList);\r\n    const dispatch = useDispatch()\r\n    const handlePageClick = ({ selected: selectedPage }) => {\r\n        setCurrentPage(selectedPage)\r\n    }\r\n    const handlePerPageSelect = (value) => {\r\n        setPerPage(value)\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    const handleAddToCart = async (product) => {\r\n        var form_data = new FormData();\r\n        form_data.append('token', localStorage.getItem(\"token\"))\r\n        form_data.append('product_id', product.id)\r\n        form_data.append('qty', 1)\r\n        dispatch(addToUserCartApi(form_data)).then(response => {\r\n            dispatch(loadAddToCart(product.product_id || product.id));\r\n            setProductName(product.title || product.name);\r\n            setOpen(true);\r\n            isAddedToWishList.current = false;\r\n        }).catch(error => {\r\n            setErrorMsg(error);\r\n            setOpen(true);\r\n        })\r\n    }\r\n    const handleAddToWishlist = (product) => {\r\n        isAddedToWishList.current = true;\r\n        dispatch(loadAddToWishlist(product.product_id || product.id));\r\n        setProductName(product.title || product.name);\r\n        setOpen(true);\r\n    };\r\n    const offset = currentPage * PER_PAGE;\r\n    const paginatedProductList = productList.slice(offset, offset + parseInt(PER_PAGE));\r\n    const pageCount = productList.length ? Math.ceil(productList.length / PER_PAGE) : 1;\r\n    return (\r\n        <div className='new-products-container'>\r\n            <h1 style={{ marginBottom: '4%', height: '50px', boxShadow: '0px 0px 4px 0px rgba(175, 105, 105, 0.47)' }}>Products List</h1>\r\n            <div className=\"shop-product-list\">\r\n                {paginatedProductList.map((product) => {\r\n                    return <div className=\"shop-product-wrap\" key={product.product_id || product.id}>\r\n                        <div className=\"api-img\">\r\n                            <button>\r\n                                <img src={product.image} alt=\"\" />\r\n                            </button>\r\n                        </div>\r\n                        <h3>\r\n                            <a href=\"product-details.html\">{product.title || product.name}</a>\r\n                        </h3>\r\n                        <div className=\"content\">\r\n                            <div>\r\n                                <div className=\"price\">\r\n                                    <span className=\"deal-price\">${product.price}</span> - <span className=\"discount\">${product.actualPrice || product.price * 1.5}</span>\r\n                                </div>\r\n                                <div className=\"rating\">\r\n                                    <FontAwesomeIcon icon={faStar} />\r\n                                    <FontAwesomeIcon icon={faStar} />\r\n                                    <FontAwesomeIcon icon={faStar} />\r\n                                    <FontAwesomeIcon icon={faStar} />\r\n                                    <FontAwesomeIcon icon={faStarHalf} />\r\n                                </div>\r\n                            </div>\r\n                            <button onClick={() => handleAddToWishlist(product)} className=\"icon-bag\" data-tip=\"Add to Wish List\">\r\n                                <FontAwesomeIcon icon={faHeart} />\r\n                            </button>\r\n                            <button onClick={() => handleAddToCart(product)} className=\"icon-bag\" data-tip=\"Add to Cart\">\r\n                                <FontAwesomeIcon icon={faShoppingCart} />\r\n                            </button>\r\n                            {!errorMsg ? <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={open} autoHideDuration={1000} onClose={handleClose}>\r\n                                <Alert variant=\"filled\" onClose={handleClose} severity=\"success\" sx={{ width: '100%' }}>\r\n                                    {isAddedToWishList.current ? `${productName} is Successfully Added to the Wish List!` : `${productName} is Successfully Added to the Cart!`}\r\n                                </Alert>\r\n                            </Snackbar> : <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={open} autoHideDuration={1000} onClose={handleClose}>\r\n                                <Alert variant=\"filled\" onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n                                    {errorMsg}\r\n                                </Alert>\r\n                            </Snackbar>}\r\n                        </div>\r\n                        <ReactTooltip />\r\n                    </div>\r\n                })}\r\n            </div>\r\n            {paginatedProductList.length === 0 ? <h3>No Searched Product Available</h3> : (<><div className='pagination'>\r\n\r\n                <ReactPaginate\r\n                    breakLabel=\"...\"\r\n                    nextLabel=\"Next\"\r\n                    onPageChange={handlePageClick}\r\n                    pageRangeDisplayed={2}\r\n                    pageCount={pageCount}\r\n                    previousLabel=\"Prev\"\r\n                    renderOnZeroPageCount={null}\r\n                    className='react_paginate'\r\n                />\r\n                <select data-tip=\"Number of Products Per Page\" onChange={e => handlePerPageSelect(e.target.value)}>{perPageArr.map((perpage, index) => { return <option key={index} value={perpage}>{perpage}</option> })}</select>\r\n            </div>\r\n                <ReactTooltip /></>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductList"],"names":["useState","currentPage","setCurrentPage","PER_PAGE","setPerPage","open","setOpen","productName","setProductName","errorMsg","setErrorMsg","isAddedToWishList","useRef","productList","useSelector","state","fetchedProductsList","dispatch","useDispatch","handleClose","handleAddToCart","product","form_data","FormData","append","localStorage","getItem","id","addToUserCartApi","then","response","loadAddToCart","product_id","title","name","current","catch","error","offset","paginatedProductList","slice","parseInt","pageCount","length","Math","ceil","className","style","marginBottom","height","boxShadow","map","src","image","alt","href","price","actualPrice","icon","faStar","faStarHalf","onClick","loadAddToWishlist","handleAddToWishlist","faHeart","faShoppingCart","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","variant","severity","sx","width","breakLabel","nextLabel","onPageChange","selectedPage","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","onChange","e","value","target","perpage","index"],"sourceRoot":""}